---
- name: Ensure pip and requests library is installed
  become: true
  ansible.builtin.apt:
      name:
        - python3-pip
        - python3-requests

- name: Ensure CA destination directory exists
  become: true
  ansible.builtin.file:
    path: '/usr/local/share/ca-certificates'
    state: directory
    group: 'root'
    owner: 'root'
    mode: '0755'
    recurse: true

- name: Add CA certificates
  become: true
  ansible.builtin.copy:
    dest: '/usr/local/share/ca-certificates/{{ item | basename }}'
    src: '{{ item }}'
    group: 'root'
    owner: 'root'
    mode: '0644'
  with_items: '{{ ca_certs }}'

- name: Update CA Certificate
  become: true
  ansible.builtin.command:
    cmd: '/usr/sbin/update-ca-certificates'
  changed_when: false

- name: Get certifi bundle locations
  ansible.builtin.command:
      cmd: python3 -c "import requests.utils; print(requests.utils.DEFAULT_CA_BUNDLE_PATH)"
  register: requests_cert_bundle
  changed_when: requests_cert_bundle.rc == 0

- name: Check if the certificate string is already present
  ansible.builtin.shell:
    cmd: grep "{{ lookup('file', item).splitlines()[1] | trim }}" "{{ requests_cert_bundle.stdout }}" || true
  register: certs_present
  ignore_errors: true
  with_items: "{{ ca_certs }}"
  when: requests_cert_bundle is defined
  changed_when: true

- name: Append CA certificate to the requests module certificates bundle
  ansible.builtin.blockinfile:
    path: "{{ requests_cert_bundle.stdout }}"
    marker: '# {mark} {{ new_cert_entry.item | basename }}'
    block: "{{ lookup('file', new_cert_entry.item) }}"
  loop: "{{ certs_present.results | selectattr('stdout', 'equalto', '') | default([]) | list }}"
  loop_control:
    loop_var: new_cert_entry
    label: 'Added: {{ new_cert_entry.item }}'
